"""
Server Identity utility for the Emeralds Killfeed PvP Statistics Discord Bot.

This module maintains server identity across UUID changes and ensures 
proper guild isolation for server identifiers.
"""

import re
import os
import logging
from typing import Dict, Optional, Tuple, Any, List, Union

logger = logging.getLogger(__name__)

# Dictionary to store server UUID to numeric ID mappings
# This will be populated from the database at runtime
KNOWN_SERVERS = {}

class ServerIdentity:
    """Handles server identity resolution and persistence"""
    
    def __init__(self, bot):
        """Initialize the server identity manager
        
        Args:
            bot: The Discord bot instance with database access
        """
        self.bot = bot
        self._servers_cache = {}  # guild_id -> {server_id -> server_info}

    async def get_server_info(self, guild_id: int, server_id: str) -> Optional[Dict[str, Any]]:
        """Get server information for a given guild and server ID
        
        Args:
            guild_id: The Discord guild ID
            server_id: The game server ID
            
        Returns:
            Server information dictionary or None if not found
        """
        # Check cache first
        if guild_id in self._servers_cache and server_id in self._servers_cache[guild_id]:
            return self._servers_cache[guild_id][server_id]
            
        # Query database
        try:
            guild_doc = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})
            if not guild_doc or "servers" not in guild_doc:
                return None
                
            # Find the server in the guild's servers
            for server in guild_doc["servers"]:
                if server.get("server_id") == server_id:
                    # Cache the result
                    if guild_id not in self._servers_cache:
                        self._servers_cache[guild_id] = {}
                    self._servers_cache[guild_id][server_id] = server
                    return server
        except Exception as e:
            logger.error(f"Error getting server info: {e}")
            
        return None
        
    async def refresh_cache(self):
        """Clear and refresh the servers cache"""
        self._servers_cache = {}

async def load_server_mappings(db):
    """
    Load server mappings from the database to populate KNOWN_SERVERS dictionary.
    This consolidated function checks all possible collections where server mappings might be stored.

    Args:
        db: Database connection object

    Returns:
        Number of mappings loaded
    """
    global KNOWN_SERVERS

    if db is None:
        logger.warning("Cannot load server mappings: database connection is None")
        return 0

    try:
        # Clear existing mappings to prevent stale data
        KNOWN_SERVERS.clear()

        # CRITICAL FIX: Add hardcoded mapping for known problematic server
        # This is temporary and will be removed once the database is updated with the correct original_server_id
        KNOWN_SERVERS["5251382d-8bce-4abd-8bcb-cdef73698a46"] = "7020"
        logger.info("Added emergency fallback mapping for Emerald EU server: 5251382d-8bce-4abd-8bcb-cdef73698a46 -> 7020")
        
        # Track how many mappings we loaded
        mapping_count = 1  # Start at 1 for the emergency fallback

        # STEP 1: Simple query to find all servers with original_server_id
        try:
            # Query game_servers collection
            server_count = 0
            cursor = db.game_servers.find({"original_server_id": {"$exists": True}})
            
            async for server in cursor:
                server_id = server.get("server_id")
                original_id = server.get("original_server_id")
                
                if server_id and original_id:
                    KNOWN_SERVERS[server_id] = str(original_id)
                    server_count += 1
                    mapping_count += 1
                    logger.info(f"Loaded server mapping from game_servers: {server_id} -> {original_id}")
            
            # Query servers collection
            cursor = db.servers.find({"original_server_id": {"$exists": True}})
            
            async for server in cursor:
                server_id = server.get("server_id")
                original_id = server.get("original_server_id")
                
                if server_id and original_id and server_id not in KNOWN_SERVERS:
                    KNOWN_SERVERS[server_id] = str(original_id)
                    server_count += 1
                    mapping_count += 1
                    logger.info(f"Loaded server mapping from servers: {server_id} -> {original_id}")
            
            # Query guilds collection for server configurations
            cursor = db.guilds.find({})
            
            async for guild in cursor:
                if "servers" in guild and isinstance(guild["servers"], list):
                    for server in guild["servers"]:
                        server_id = server.get("server_id")
                        original_id = server.get("original_server_id")
                        
                        if server_id and original_id and server_id not in KNOWN_SERVERS:
                            KNOWN_SERVERS[server_id] = str(original_id)
                            server_count += 1
                            mapping_count += 1
                            logger.info(f"Loaded server mapping from guild: {server_id} -> {original_id}")
            
            logger.info(f"Loaded {server_count} server mappings from database")
            
            # STEP 2: For servers without original_server_id, extract from hostname if possible
            cursor = db.game_servers.find({"original_server_id": {"$exists": False}, "hostname": {"$exists": True}})
            hostname_count = 0
            
            async for server in cursor:
                server_id = server.get("server_id")
                hostname = server.get("hostname")
                
                if server_id and hostname and '_' in hostname and server_id not in KNOWN_SERVERS:
                    # Extract ID from hostname_NNNN pattern
                    parts = hostname.split('_')
                    potential_id = parts[-1]
                    if potential_id.isdigit():
                        KNOWN_SERVERS[server_id] = potential_id
                        hostname_count += 1
                        mapping_count += 1
                        logger.info(f"Extracted ID from hostname for server {server_id}: {hostname} -> {potential_id}")

            cursor = db.servers.find({"original_server_id": {"$exists": False}, "hostname": {"$exists": True}})
            
            async for server in cursor:
                server_id = server.get("server_id")
                hostname = server.get("hostname")
                
                if server_id and hostname and '_' in hostname and server_id not in KNOWN_SERVERS:
                    # Extract ID from hostname_NNNN pattern
                    parts = hostname.split('_')
                    potential_id = parts[-1]
                    if potential_id.isdigit():
                        KNOWN_SERVERS[server_id] = potential_id
                        hostname_count += 1
                        mapping_count += 1
                        logger.info(f"Extracted ID from hostname for server {server_id}: {hostname} -> {potential_id}")
            
            logger.info(f"Extracted {hostname_count} server IDs from hostnames")
            
        except Exception as e:
            logger.error(f"Error loading server mappings: {e}")
        
        # Log all mappings at debug level
        for server_id, original_id in KNOWN_SERVERS.items():
            logger.debug(f"Final server mapping: {server_id} -> {original_id}")

        logger.info(f"Loaded {mapping_count} total server mappings")
        return mapping_count
    except Exception as e:
        logger.error(f"Error loading server mappings: {e}")
        return 0

def identify_server(server_id: str, hostname: Optional[str] = None, 
                   server_name: Optional[str] = None, 
                   guild_id: Optional[str] = None) -> Tuple[str, bool]:
    """Identify and standardize server IDs based on mappings and hostname
    
    This simplified function identifies a server's proper ID using:
    1. Check KNOWN_SERVERS mapping first (highest priority)
    2. Return the original server_id if it's numeric
    3. Extract from hostname if possible
    4. Use server_id as is if nothing else works
    
    Args:
        server_id: Server ID 
        hostname: Optional hostname that might contain numeric ID
        server_name: Optional server name
        guild_id: Optional guild ID for isolation
        
    Returns:
        Tuple of (identified_id, is_known) where:
        - identified_id: The standardized server ID (preferably numeric)
        - is_known: Whether this ID was already known/mapped
    """
    # STEP 1: Check if this server_id is in our mapping dictionary (highest priority)
    if server_id in KNOWN_SERVERS:
        mapped_id = KNOWN_SERVERS[server_id]
        logger.info(f"Using mapped server ID for {server_id}: {mapped_id}")
        return mapped_id, True

    # STEP 2: If server_id is numeric, use it directly
    if server_id and str(server_id).isdigit():
        logger.debug(f"Server ID {server_id} is already numeric")
        return server_id, True
        
    # STEP 3: Try to extract from hostname if available
    if hostname and '_' in hostname:
        parts = hostname.split('_')
        if parts[-1].isdigit():
            numeric_id = parts[-1]
            logger.info(f"Extracted numeric ID from hostname: {hostname} -> {numeric_id}")
            # Add this to KNOWN_SERVERS for future lookups
            KNOWN_SERVERS[server_id] = numeric_id
            return numeric_id, True
            
    # STEP 4: As a last resort, just use the server_id as is
    logger.warning(f"Could not resolve server ID {server_id} to a numeric ID, using as is")
    return server_id, False

async def resolve_server_id(db, server_id: str, guild_id: Optional[str] = None) -> Dict[str, Any]:
    """Comprehensively resolve a server ID to find the server configuration.

    This function searches all collections using various ID forms (UUID, numeric ID, original_server_id)
    to ensure consistent server identity resolution across the application.

    Args:
        db: Database connection
        server_id: The server ID (UUID or numeric ID) to resolve
        guild_id: Optional Discord guild ID for isolation

    Returns:
        Dict containing server configuration or empty dict if not found:
        - "server_id": The standardized server ID (UUID)
        - "original_server_id": The original server ID (numeric)
        - "config": The complete server configuration
        - "collection": The collection where the server was found
    """
    if db is None or not server_id:
        logger.warning(f"Cannot resolve server ID: {'db is None' if db is None else f'invalid server_id: {server_id}'}")
        return {}

    # Ensure we're working with strings
    server_id = str(server_id) if server_id else ""
    guild_id = str(guild_id) if guild_id else ""

    logger.info(f"Resolving server ID: {server_id} (guild: {guild_id or 'None'})")

    # First, handle the case where server_id is a numeric ID that might be an original_server_id
    original_id_match = None
    if server_id.isdigit():
        logger.info(f"Server ID {server_id} is numeric, checking if it matches any original_server_id")
        # Look for servers with this as original_server_id
        try:
            # Search in game_servers collection
            server = await db.game_servers.find_one({"original_server_id": server_id})
            if server:
                logger.info(f"Found server with original_server_id={server_id} in game_servers: {server.get('server_id')}")
                return {
                    "server_id": server.get("server_id"),
                    "original_server_id": server_id,
                    "config": server,
                    "collection": "game_servers"
                }

            # Also search in servers collection
            server = await db.servers.find_one({"original_server_id": server_id})
            if server:
                logger.info(f"Found server with original_server_id={server_id} in servers: {server.get('server_id')}")
                return {
                    "server_id": server.get("server_id"),
                    "original_server_id": server_id,
                    "config": server,
                    "collection": "servers"
                }

            # If guild_id provided, also search in that guild's servers
            if guild_id:
                guild = await db.guilds.find_one({"guild_id": guild_id})
                if guild and "servers" in guild:
                    for guild_server in guild.get("servers", []):
                        if str(guild_server.get("original_server_id")) == server_id:
                            logger.info(f"Found server with original_server_id={server_id} in guild {guild_id}")
                            return {
                                "server_id": guild_server.get("server_id"),
                                "original_server_id": server_id,
                                "config": guild_server,
                                "collection": "guilds.servers"
                            }
        except Exception as e:
            logger.error(f"Error searching for server by original_server_id={server_id}: {e}")

    # Next, try direct lookup by server_id
    try:
        # Try game_servers first
        server = await db.game_servers.find_one({"server_id": server_id})
        if server:
            logger.info(f"Found server with server_id={server_id} in game_servers")
            return {
                "server_id": server_id,
                "original_server_id": server.get("original_server_id"),
                "config": server,
                "collection": "game_servers"
            }

        # Then try servers collection
        server = await db.servers.find_one({"server_id": server_id})
        if server:
            logger.info(f"Found server with server_id={server_id} in servers")
            return {
                "server_id": server_id,
                "original_server_id": server.get("original_server_id"),
                "config": server,
                "collection": "servers"
            }

        # If guild_id provided, also check that guild's servers
        if guild_id:
            guild = await db.guilds.find_one({"guild_id": guild_id})
            if guild and "servers" in guild:
                for guild_server in guild.get("servers", []):
                    if guild_server.get("server_id") == server_id:
                        logger.info(f"Found server with server_id={server_id} in guild {guild_id}")
                        return {
                            "server_id": server_id,
                            "original_server_id": guild_server.get("original_server_id"),
                            "config": guild_server,
                            "collection": "guilds.servers"
                        }
    except Exception as e:
        logger.error(f"Error searching for server by server_id={server_id}: {e}")

    # Server not found after checking all sources
    logger.warning(f"Server with ID {server_id} not found in any collection")
    return {}

def standardize_server_id(server_id: str) -> str:
    """Standardize server ID format
    
    This function ensures server IDs have consistent formatting
    for comparisons throughout the codebase.
    
    Args:
        server_id: Server ID to standardize
        
    Returns:
        Standardized server ID
    """
    if not server_id:
        return ""
        
    # Convert to string, strip whitespace
    clean_id = str(server_id).strip()
    
    # For UUID-format IDs, keep as is, but lowercase
    if "-" in clean_id and len(clean_id) > 30:
        return clean_id.lower()
        
    # For numeric IDs, ensure consistent formatting
    if clean_id.isdigit():
        # Remove leading zeros
        return str(int(clean_id))
        
    # If not a special case, return as is
    return clean_id

def extract_numeric_id(server_id: str, server_name: Optional[str] = None, 
                      hostname: Optional[str] = None) -> Optional[str]:
    """Extract numeric ID from server info.
    
    This function tries multiple strategies to extract a numeric ID:
    1. Check if server_id itself is numeric
    2. Look for numeric ID in server_name
    3. Extract ID from hostname (common pattern: hostname_1234)
    4. Check if it's a UUID and extract numeric part
    5. Fall back to known mappings
    
    Args:
        server_id: Server ID (possibly UUID format)
        server_name: Optional server name that might contain numeric ID
        hostname: Optional hostname that might contain numeric ID
        
    Returns:
        Extracted numeric ID or None if not found
    """
    # Prevent log spam - only log at debug level
    # logger.debug(f"Attempting to extract numeric ID from: id={server_id}, name={server_name}, host={hostname}")
    
    # Strategy 1: If server_id is numeric, use it directly
    if server_id and str(server_id).isdigit():
        # logger.debug(f"Server ID is already numeric: {server_id}")
        return str(server_id)
    
    # Strategy 2: Check in server name (common pattern: "Server 1234")
    if server_name:
        # Look for any numeric sequences that are at least 4 digits
        for word in str(server_name).split():
            if word.isdigit() and len(word) >= 4:
                # logger.debug(f"Found numeric ID {word} in server name: {server_name}")
                return word
    
    # Strategy 3: Extract from hostname (common pattern: hostname_1234)
    if hostname:
        # Remove port if present
        hostname_base = hostname.split(':')[0]
        
        # Check for underscore pattern
        if '_' in hostname_base:
            parts = hostname_base.split('_')
            if parts[-1].isdigit() and len(parts[-1]) >= 4:
                # logger.debug(f"Extracted numeric ID {parts[-1]} from hostname: {hostname}")
                return parts[-1]
    
    # Strategy 4: Check if it's a UUID and try to extract a usable numeric ID
    if server_id and '-' in server_id and len(server_id) > 30:
        # UUID-style ID, try to extract numeric portion
        import uuid
        try:
            # Convert to standard UUID format if needed
            clean_uuid = str(server_id).strip().lower()
            if not clean_uuid.startswith('0x'):
                # Parse the UUID to validate it
                parsed_uuid = uuid.UUID(clean_uuid)
                
                # CRITICAL FIX: Check if this UUID is in KNOWN_SERVERS mapping
                if clean_uuid in KNOWN_SERVERS:
                    # Use the mapped original_server_id (e.g., "7020")
                    mapped_id = KNOWN_SERVERS[clean_uuid]
                    logger.info(f"Using mapped server ID from KNOWN_SERVERS: {clean_uuid} -> {mapped_id}")
                    return mapped_id
                
                # Get the last 12 digits of the int value only as a fallback
                # This is NOT recommended for production - servers should be properly mapped in the database
                numeric_id = str(int(parsed_uuid.int) % 10**12)
                
                # Make sure it's at least 4 digits
                if len(numeric_id) >= 4:
                    if not hasattr(extract_numeric_id, "uuid_mappings"):
                        extract_numeric_id.uuid_mappings = {}
                    
                    # Keep track of the mapping for debugging
                    if clean_uuid not in extract_numeric_id.uuid_mappings:
                        extract_numeric_id.uuid_mappings[clean_uuid] = numeric_id
                        logger.info(f"UUID Conversion (FALLBACK): {clean_uuid} -> {numeric_id}")
                    
                    # Use only the first 4-7 digits to match previous behavior
                    # This is dangerous and should be replaced with proper mapping!
                    short_id = numeric_id[:7]
                    logger.warning(f"Using UUID-derived ID: {short_id} - THIS IS NOT RECOMMENDED!")
                    
                    return short_id
        except (ValueError, AttributeError, TypeError):
            # Not a valid UUID, continue to other strategies
            pass
    
    # Strategy 5: Check known mappings
    if server_id in KNOWN_SERVERS:
        numeric_id = KNOWN_SERVERS[server_id]
        # logger.debug(f"Found numeric ID {numeric_id} in known mappings for UUID: {server_id}")
        return numeric_id
    
    # No numeric ID found - only log this at debug level to reduce spam
    # logger.debug(f"Could not extract numeric ID for server: {server_id}")
    return None

def get_path_components(server_id: str, hostname: str, 
                       original_server_id: Optional[str] = None,
                       guild_id: Optional[str] = None) -> Tuple[str, str]:
    """Get path components for server directories.

    This builds the directory paths consistently with server identity.

    CRITICAL BUGFIX: This function now has stronger logic for handling server identity,
    giving priority to the original_server_id parameter when provided. This ensures
    that newly added servers will use the correct ID even before database mappings
    are fully established.

    Args:
        server_id: The server ID (usually UUID) from the database
        hostname: Server hostname
        original_server_id: Optional original server ID to override detection
        guild_id: Optional Discord guild ID for isolation

    Returns:
        Tuple of (server_dir, path_server_id)
        - server_dir: The server directory name (hostname_serverid)
        - path_server_id: The server ID to use in paths
    """
    # Ensure we're working with strings
    server_id = str(server_id) if server_id is not None else ""
    hostname = str(hostname) if hostname is not None else ""
    original_server_id = str(original_server_id) if original_server_id is not None else ""
    guild_id = str(guild_id) if guild_id is not None else ""

    # Cache for log reduction
    if not hasattr(get_path_components, "logged_ids"):
        get_path_components.logged_ids = set()
    
    if not hasattr(get_path_components, "logged_extractions"):
        get_path_components.logged_extractions = set()
        
    if not hasattr(get_path_components, "logged_dirs"):
        get_path_components.logged_dirs = set()
        
    if not hasattr(get_path_components, "resolved_ids"):
        get_path_components.resolved_ids = {}

    # If we've already resolved this server_id, use the cached result
    # This drastically reduces repeated calls and log spam
    cache_key = f"{server_id}:{original_server_id}:{hostname}"
    if cache_key in get_path_components.resolved_ids:
        return get_path_components.resolved_ids[cache_key]

    # Clean hostname - handle both port specifications (:22) and embedded IDs (_1234)
    clean_hostname = hostname.split(':')[0] if hostname else "server"

    # Use our new extract_numeric_id function for more robust ID extraction
    numeric_id = None
    
    # PRIORITY 1: Use explicit original_server_id if provided (most reliable)
    if original_server_id and str(original_server_id).strip():
        # Only log on first use, not repeated access to avoid spamming logs
        if original_server_id not in get_path_components.logged_ids:
            logger.debug(f"Using provided original_server_id '{original_server_id}' for path construction")
            get_path_components.logged_ids.add(original_server_id)
        numeric_id = str(original_server_id)

    # PRIORITY 2: Try to extract from available data if not explicitly provided
    if not numeric_id:
        numeric_id = extract_numeric_id(server_id, None, hostname)
        if numeric_id:
            # Only log on first extraction to avoid spamming logs
            extraction_key = f"{server_id}:{numeric_id}"
            if extraction_key not in get_path_components.logged_extractions:
                logger.debug(f"Extracted numeric ID '{numeric_id}' for server {server_id}")
                get_path_components.logged_extractions.add(extraction_key)
    
    # PRIORITY 3: Fall back to server_id if we couldn't extract a numeric ID
    if not numeric_id:
        # If this is a UUID, use a consistent numeric representation
        if '-' in server_id and len(server_id) > 30:
            try:
                import uuid
                # Convert to standard UUID format and extract a numeric portion
                clean_uuid = str(server_id).strip().lower()
                parsed_uuid = uuid.UUID(clean_uuid)
                
                # Use last 10 digits to create a stable numeric ID
                numeric_id = str(int(parsed_uuid.int) % 10**10)
                
                # Ensure it's at least 4 digits
                if len(numeric_id) < 4:
                    numeric_id = numeric_id.zfill(4)
                    
                logger.info(f"UUID conversion for path construction: {server_id} -> {numeric_id}")
            except Exception as e:
                # Fallback to server ID directly
                logger.warning(f"Could not convert UUID {server_id} to numeric ID: {e}")
                numeric_id = server_id
        else:
            logger.warning(f"Could not extract numeric ID for server {server_id}, using server_id directly")
            numeric_id = server_id

    # Build server directory with cleaned hostname and numeric ID
    # For this specific case we know the pattern is hostname_id
    server_dir = f"{clean_hostname}_{numeric_id}"
    
    # Only log directory creation once per unique directory to prevent log spam
    if server_dir not in get_path_components.logged_dirs:
        logger.debug(f"Created server directory '{server_dir}' with ID {numeric_id}")
        get_path_components.logged_dirs.add(server_dir)
    
    # Cache the result for future calls
    result = (server_dir, numeric_id)
    get_path_components.resolved_ids[cache_key] = result

    return result